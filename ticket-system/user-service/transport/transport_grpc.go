// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: ab5a6c03d7
// Version Date: 2023-06-04T17:09:20Z

package transport

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/POABOB/go-microservice/ticket-system/pb/user"
	endpts "github.com/POABOB/go-microservice/ticket-system/user-service/endpoint"
)

// grpcServer implements the UserServer interface
type grpcServer struct {
	login                   grpctransport.Handler
	register                grpctransport.Handler
	loginwithgoogle         grpctransport.Handler
	loginwithgooglecallback grpctransport.Handler
	healthcheck             grpctransport.Handler
}

// MakeGRPCServer makes a set of endpoints available as a gRPC UserServer.
func MakeGRPCServer(_ context.Context, endpoints endpts.Endpoints, options ...grpctransport.ServerOption) pb.UserServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// user

		login: grpctransport.NewServer(
			endpoints.LoginEndpoint,
			DecodeGRPCLoginRequest,
			EncodeGRPCLoginResponse,
			serverOptions...,
		),
		register: grpctransport.NewServer(
			endpoints.RegisterEndpoint,
			DecodeGRPCRegisterRequest,
			EncodeGRPCRegisterResponse,
			serverOptions...,
		),
		loginwithgoogle: grpctransport.NewServer(
			endpoints.LoginWithGoogleEndpoint,
			DecodeGRPCLoginWithGoogleRequest,
			EncodeGRPCLoginWithGoogleResponse,
			serverOptions...,
		),
		loginwithgooglecallback: grpctransport.NewServer(
			endpoints.LoginWithGoogleCallbackEndpoint,
			DecodeGRPCLoginWithGoogleCallbackRequest,
			EncodeGRPCLoginWithGoogleCallbackResponse,
			serverOptions...,
		),
		healthcheck: grpctransport.NewServer(
			endpoints.HealthCheckEndpoint,
			DecodeGRPCHealthCheckRequest,
			EncodeGRPCHealthCheckResponse,
			serverOptions...,
		),
	}
}

// Methods for grpcServer to implement UserServer interface

func (s *grpcServer) Login(ctx context.Context, req *pb.UserLoginRequest) (*pb.UserLoginResponse, error) {
	_, rep, err := s.login.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.UserLoginResponse), nil
}

func (s *grpcServer) Register(ctx context.Context, req *pb.UserRegisterRequest) (*pb.UserRegisterResponse, error) {
	_, rep, err := s.register.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.UserRegisterResponse), nil
}

func (s *grpcServer) LoginWithGoogle(ctx context.Context, req *pb.UserLoginRequest) (*pb.UserLoginResponse, error) {
	_, rep, err := s.loginwithgoogle.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.UserLoginResponse), nil
}

func (s *grpcServer) LoginWithGoogleCallback(ctx context.Context, req *pb.UserLoginRequest) (*pb.UserLoginResponse, error) {
	_, rep, err := s.loginwithgooglecallback.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.UserLoginResponse), nil
}

func (s *grpcServer) HealthCheck(ctx context.Context, req *pb.HealthCheckRequest) (*pb.HealthCheckResponse, error) {
	_, rep, err := s.healthcheck.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.HealthCheckResponse), nil
}

// Server Decode

// DecodeGRPCLoginRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC login request to a user-domain login request. Primarily useful in a server.
func DecodeGRPCLoginRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.UserLoginRequest)
	return req, nil
}

// DecodeGRPCRegisterRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC register request to a user-domain register request. Primarily useful in a server.
func DecodeGRPCRegisterRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.UserRegisterRequest)
	return req, nil
}

// DecodeGRPCLoginWithGoogleRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC loginwithgoogle request to a user-domain loginwithgoogle request. Primarily useful in a server.
func DecodeGRPCLoginWithGoogleRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.UserLoginRequest)
	return req, nil
}

// DecodeGRPCLoginWithGoogleCallbackRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC loginwithgooglecallback request to a user-domain loginwithgooglecallback request. Primarily useful in a server.
func DecodeGRPCLoginWithGoogleCallbackRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.UserLoginRequest)
	return req, nil
}

// DecodeGRPCHealthCheckRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC healthcheck request to a user-domain healthcheck request. Primarily useful in a server.
func DecodeGRPCHealthCheckRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.HealthCheckRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCLoginResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain login response to a gRPC login reply. Primarily useful in a server.
func EncodeGRPCLoginResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.UserLoginResponse)
	return resp, nil
}

// EncodeGRPCRegisterResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain register response to a gRPC register reply. Primarily useful in a server.
func EncodeGRPCRegisterResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.UserRegisterResponse)
	return resp, nil
}

// EncodeGRPCLoginWithGoogleResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain loginwithgoogle response to a gRPC loginwithgoogle reply. Primarily useful in a server.
func EncodeGRPCLoginWithGoogleResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.UserLoginResponse)
	return resp, nil
}

// EncodeGRPCLoginWithGoogleCallbackResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain loginwithgooglecallback response to a gRPC loginwithgooglecallback reply. Primarily useful in a server.
func EncodeGRPCLoginWithGoogleCallbackResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.UserLoginResponse)
	return resp, nil
}

// EncodeGRPCHealthCheckResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain healthcheck response to a gRPC healthcheck reply. Primarily useful in a server.
func EncodeGRPCHealthCheckResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.HealthCheckResponse)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
