// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: c27db7f217
// Version Date: 2023-06-10T03:54:57Z

package middlewares

import (
	"context"
	"fmt"
	"time"

	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/metrics"
	kitzipkin "github.com/go-kit/kit/tracing/zipkin"
	"github.com/openzipkin/zipkin-go"
	"go.uber.org/zap"

	endpnts "github.com/POABOB/go-microservice/ticket-system/user-service/endpoint"
)

// Metrics

// 紀錄請求次數
func Counter(Count metrics.Counter) endpnts.LabeledMiddleware {
	return func(name string, in endpoint.Endpoint) endpoint.Endpoint { // Endpoint
		return func(ctx context.Context, req interface{}) (interface{}, error) { // Service
			Count.With("endpoint", name).Add(1)
			return in(ctx, req)
		}
	}
}

// 紀錄錯誤次數
func ErrorCounter(errCount metrics.Counter) endpnts.LabeledMiddleware {
	return func(name string, in endpoint.Endpoint) endpoint.Endpoint { // Endpoint
		return func(ctx context.Context, req interface{}) (interface{}, error) { // Service
			resp, err := in(ctx, req)
			if err != nil {
				errCount.With("endpoint", name).Add(1)
			}
			return resp, err
		}
	}
}

// 記錄延遲時間
func Latency(h metrics.Histogram) endpnts.LabeledMiddleware {
	return func(name string, in endpoint.Endpoint) endpoint.Endpoint { // Endpoint
		return func(ctx context.Context, req interface{}) (interface{}, error) { // Service
			defer func(begin time.Time) {
				h.With("endpoint", name).Observe(time.Since(begin).Seconds())
			}(time.Now())
			return in(ctx, req)
		}
	}
}

// Logging

func Logging(logger *zap.Logger) endpnts.LabeledMiddleware {
	return func(name string, in endpoint.Endpoint) endpoint.Endpoint { // Endpoint
		return func(ctx context.Context, req interface{}) (ret interface{}, err error) { // Service
			defer func(begin time.Time) {
				logger.Info(fmt.Sprintf("function: %v, request: %v, result: %v, took: %v", name, req, ret, time.Since(begin)))
			}(time.Now())
			return in(ctx, req)
		}
	}
}

// Zipkin

func ZipkinMiddleware(tracer *zipkin.Tracer) endpnts.LabeledMiddleware {
	return func(name string, in endpoint.Endpoint) endpoint.Endpoint {
		return kitzipkin.TraceEndpoint(tracer, name)(in)
	}
}
