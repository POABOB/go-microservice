// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: c27db7f217
// Version Date: 2023-06-10T03:54:57Z

// Package grpc provides a gRPC client for the User service.
package grpc

import (
	"context"
	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	"github.com/opentracing/opentracing-go"

	pb "github.com/POABOB/go-microservice/ticket-system/pb/user"
	"github.com/POABOB/go-microservice/ticket-system/pkg/client"
	"github.com/POABOB/go-microservice/ticket-system/pkg/loadbalance"
)

type UserClient interface {
	Login(ctx context.Context, tracer opentracing.Tracer, request *pb.UserLoginRequest) (*pb.UserLoginResponse, error)
	Register(ctx context.Context, tracer opentracing.Tracer, request *pb.UserRegisterRequest) (*pb.UserRegisterResponse, error)
	LoginWithGoogle(ctx context.Context, tracer opentracing.Tracer, request *pb.UserLoginRequest) (*pb.UserLoginResponse, error)
	LoginWithGoogleCallback(ctx context.Context, tracer opentracing.Tracer, request *pb.UserLoginRequest) (*pb.UserLoginResponse, error)
	HealthCheck(ctx context.Context, tracer opentracing.Tracer, request *pb.HealthCheckRequest) (*pb.HealthCheckResponse, error)
}

type UserClientImpl struct {
	/**
	 * 可以配置負載均衡、鏈路追蹤等機制，亦可以配置 invokeAfter 和 invokerBefore
	 */
	manager     client.ClientManager
	serviceName string
	loadBalance loadbalance.LoadBalance
	tracer      opentracing.Tracer
}

func (impl *UserClientImpl) Login(ctx context.Context, tracer opentracing.Tracer, request *pb.UserLoginRequest) (*pb.UserLoginResponse, error) {
	response := new(pb.UserLoginResponse)
	if err := impl.manager.DecoratorInvoke("/user.User/Login", "User_Login", tracer, ctx, request, response); err != nil {
		return nil, err
	}
	return response, nil
}

func (impl *UserClientImpl) Register(ctx context.Context, tracer opentracing.Tracer, request *pb.UserRegisterRequest) (*pb.UserRegisterResponse, error) {
	response := new(pb.UserRegisterResponse)
	if err := impl.manager.DecoratorInvoke("/user.User/Register", "User_Register", tracer, ctx, request, response); err != nil {
		return nil, err
	}
	return response, nil
}

func (impl *UserClientImpl) LoginWithGoogle(ctx context.Context, tracer opentracing.Tracer, request *pb.UserLoginRequest) (*pb.UserLoginResponse, error) {
	response := new(pb.UserLoginResponse)
	if err := impl.manager.DecoratorInvoke("/user.User/LoginWithGoogle", "User_LoginWithGoogle", tracer, ctx, request, response); err != nil {
		return nil, err
	}
	return response, nil
}

func (impl *UserClientImpl) LoginWithGoogleCallback(ctx context.Context, tracer opentracing.Tracer, request *pb.UserLoginRequest) (*pb.UserLoginResponse, error) {
	response := new(pb.UserLoginResponse)
	if err := impl.manager.DecoratorInvoke("/user.User/LoginWithGoogleCallback", "User_LoginWithGoogleCallback", tracer, ctx, request, response); err != nil {
		return nil, err
	}
	return response, nil
}

func (impl *UserClientImpl) HealthCheck(ctx context.Context, tracer opentracing.Tracer, request *pb.HealthCheckRequest) (*pb.HealthCheckResponse, error) {
	response := new(pb.HealthCheckResponse)
	if err := impl.manager.DecoratorInvoke("/user.User/HealthCheck", "User_HealthCheck", tracer, ctx, request, response); err != nil {
		return nil, err
	}
	return response, nil
}

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func NewUserClient(serviceName string, lb loadbalance.LoadBalance, tracer opentracing.Tracer) (UserClient, error) {
	if serviceName == "" {
		serviceName = "user"
	}
	if lb == nil {
		lb = client.DefaultLoadBalance
	}

	return &UserClientImpl{
		manager:     client.NewDefaultClientManager(serviceName, lb),
		serviceName: serviceName,
		loadBalance: lb,
		tracer:      tracer,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCLoginResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC login reply to a user-domain login response. Primarily useful in a client.
func DecodeGRPCLoginResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.UserLoginResponse)
	return reply, nil
}

// DecodeGRPCRegisterResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC register reply to a user-domain register response. Primarily useful in a client.
func DecodeGRPCRegisterResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.UserRegisterResponse)
	return reply, nil
}

// DecodeGRPCLoginWithGoogleResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC loginwithgoogle reply to a user-domain loginwithgoogle response. Primarily useful in a client.
func DecodeGRPCLoginWithGoogleResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.UserLoginResponse)
	return reply, nil
}

// DecodeGRPCLoginWithGoogleCallbackResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC loginwithgooglecallback reply to a user-domain loginwithgooglecallback response. Primarily useful in a client.
func DecodeGRPCLoginWithGoogleCallbackResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.UserLoginResponse)
	return reply, nil
}

// DecodeGRPCHealthCheckResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC healthcheck reply to a user-domain healthcheck response. Primarily useful in a client.
func DecodeGRPCHealthCheckResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.HealthCheckResponse)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCLoginRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain login request to a gRPC login request. Primarily useful in a client.
func EncodeGRPCLoginRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UserLoginRequest)
	return req, nil
}

// EncodeGRPCRegisterRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain register request to a gRPC register request. Primarily useful in a client.
func EncodeGRPCRegisterRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UserRegisterRequest)
	return req, nil
}

// EncodeGRPCLoginWithGoogleRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain loginwithgoogle request to a gRPC loginwithgoogle request. Primarily useful in a client.
func EncodeGRPCLoginWithGoogleRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UserLoginRequest)
	return req, nil
}

// EncodeGRPCLoginWithGoogleCallbackRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain loginwithgooglecallback request to a gRPC loginwithgooglecallback request. Primarily useful in a client.
func EncodeGRPCLoginWithGoogleCallbackRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UserLoginRequest)
	return req, nil
}

// EncodeGRPCHealthCheckRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain healthcheck request to a gRPC healthcheck request. Primarily useful in a client.
func EncodeGRPCHealthCheckRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.HealthCheckRequest)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.ClientRequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}
