// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rapidbuying.proto

package rapidbuying

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RapidBuyingRequest struct {
	Id            int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Source        string `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source,omitempty"`
	AuthCode      string `protobuf:"bytes,3,opt,name=AuthCode,proto3" json:"AuthCode,omitempty"`
	SecTime       string `protobuf:"bytes,4,opt,name=SecTime,proto3" json:"SecTime,omitempty"`
	Nance         string `protobuf:"bytes,5,opt,name=Nance,proto3" json:"Nance,omitempty"`
	UserId        int64  `protobuf:"varint,6,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UserAuthSign  string `protobuf:"bytes,7,opt,name=UserAuthSign,proto3" json:"UserAuthSign,omitempty"`
	AccessTime    int64  `protobuf:"varint,8,opt,name=AccessTime,proto3" json:"AccessTime,omitempty"`
	ClientAddr    string `protobuf:"bytes,9,opt,name=ClientAddr,proto3" json:"ClientAddr,omitempty"`
	ClientRefence string `protobuf:"bytes,10,opt,name=ClientRefence,proto3" json:"ClientRefence,omitempty"`
}

func (m *RapidBuyingRequest) Reset()         { *m = RapidBuyingRequest{} }
func (m *RapidBuyingRequest) String() string { return proto.CompactTextString(m) }
func (*RapidBuyingRequest) ProtoMessage()    {}
func (*RapidBuyingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_185970a4cd566bba, []int{0}
}
func (m *RapidBuyingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RapidBuyingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RapidBuyingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RapidBuyingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RapidBuyingRequest.Merge(m, src)
}
func (m *RapidBuyingRequest) XXX_Size() int {
	return m.Size()
}
func (m *RapidBuyingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RapidBuyingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RapidBuyingRequest proto.InternalMessageInfo

func (m *RapidBuyingRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RapidBuyingRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *RapidBuyingRequest) GetAuthCode() string {
	if m != nil {
		return m.AuthCode
	}
	return ""
}

func (m *RapidBuyingRequest) GetSecTime() string {
	if m != nil {
		return m.SecTime
	}
	return ""
}

func (m *RapidBuyingRequest) GetNance() string {
	if m != nil {
		return m.Nance
	}
	return ""
}

func (m *RapidBuyingRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RapidBuyingRequest) GetUserAuthSign() string {
	if m != nil {
		return m.UserAuthSign
	}
	return ""
}

func (m *RapidBuyingRequest) GetAccessTime() int64 {
	if m != nil {
		return m.AccessTime
	}
	return 0
}

func (m *RapidBuyingRequest) GetClientAddr() string {
	if m != nil {
		return m.ClientAddr
	}
	return ""
}

func (m *RapidBuyingRequest) GetClientRefence() string {
	if m != nil {
		return m.ClientRefence
	}
	return ""
}

type RapidBuyingResponse struct {
	Id        int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserId    int64  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`
	TokenTime int64  `protobuf:"varint,4,opt,name=TokenTime,proto3" json:"TokenTime,omitempty"`
	Code      int64  `protobuf:"varint,5,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (m *RapidBuyingResponse) Reset()         { *m = RapidBuyingResponse{} }
func (m *RapidBuyingResponse) String() string { return proto.CompactTextString(m) }
func (*RapidBuyingResponse) ProtoMessage()    {}
func (*RapidBuyingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_185970a4cd566bba, []int{1}
}
func (m *RapidBuyingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RapidBuyingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RapidBuyingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RapidBuyingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RapidBuyingResponse.Merge(m, src)
}
func (m *RapidBuyingResponse) XXX_Size() int {
	return m.Size()
}
func (m *RapidBuyingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RapidBuyingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RapidBuyingResponse proto.InternalMessageInfo

func (m *RapidBuyingResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RapidBuyingResponse) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RapidBuyingResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *RapidBuyingResponse) GetTokenTime() int64 {
	if m != nil {
		return m.TokenTime
	}
	return 0
}

func (m *RapidBuyingResponse) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*RapidBuyingRequest)(nil), "rapidbuying.RapidBuyingRequest")
	proto.RegisterType((*RapidBuyingResponse)(nil), "rapidbuying.RapidBuyingResponse")
}

func init() { proto.RegisterFile("rapidbuying.proto", fileDescriptor_185970a4cd566bba) }

var fileDescriptor_185970a4cd566bba = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcd, 0x4e, 0xc2, 0x40,
	0x10, 0xc7, 0xbb, 0x85, 0xf2, 0x31, 0xa8, 0x89, 0x23, 0x31, 0x1b, 0x62, 0x56, 0xd2, 0x78, 0xe0,
	0xc4, 0x41, 0x9f, 0x00, 0x38, 0x71, 0xf1, 0xb0, 0xe0, 0x03, 0x40, 0x77, 0xc4, 0x46, 0x6d, 0xb1,
	0x1f, 0x07, 0x1f, 0xc0, 0xbb, 0xcf, 0xe1, 0x93, 0x78, 0xe4, 0xe8, 0xd1, 0xc0, 0x8b, 0x98, 0x4e,
	0x2b, 0xb6, 0x51, 0x6f, 0xf3, 0xfb, 0xcf, 0xee, 0xce, 0xcc, 0x7f, 0x16, 0x8e, 0xa3, 0xc5, 0xda,
	0x37, 0xcb, 0xf4, 0xd9, 0x0f, 0x56, 0xc3, 0x75, 0x14, 0x26, 0x21, 0x76, 0x4a, 0x92, 0xfb, 0x66,
	0x03, 0xea, 0x8c, 0xc7, 0xcc, 0x9a, 0x9e, 0x52, 0x8a, 0x13, 0x3c, 0x02, 0x7b, 0x6a, 0xa4, 0xe8,
	0x8b, 0x41, 0x4d, 0xdb, 0x53, 0x83, 0xa7, 0xd0, 0x98, 0x85, 0x69, 0xe4, 0x91, 0xb4, 0xfb, 0x62,
	0xd0, 0xd6, 0x05, 0x61, 0x0f, 0x5a, 0xa3, 0x34, 0xb9, 0x9b, 0x84, 0x86, 0x64, 0x8d, 0x33, 0x7b,
	0x46, 0x09, 0xcd, 0x19, 0x79, 0x73, 0xff, 0x91, 0x64, 0x9d, 0x53, 0xdf, 0x88, 0x5d, 0x70, 0xae,
	0x17, 0x81, 0x47, 0xd2, 0x61, 0x3d, 0x87, 0xac, 0xc6, 0x4d, 0x4c, 0xd1, 0xd4, 0xc8, 0x06, 0xd7,
	0x2d, 0x08, 0x5d, 0x38, 0xc8, 0xa2, 0xec, 0xdd, 0x99, 0xbf, 0x0a, 0x64, 0x93, 0x2f, 0x55, 0x34,
	0x54, 0x00, 0x23, 0xcf, 0xa3, 0x38, 0xe6, 0x72, 0x2d, 0xbe, 0x5f, 0x52, 0xb2, 0xfc, 0xe4, 0xc1,
	0xa7, 0x20, 0x19, 0x19, 0x13, 0xc9, 0x36, 0xbf, 0x50, 0x52, 0xf0, 0x02, 0x0e, 0x73, 0xd2, 0x74,
	0x4b, 0x59, 0x67, 0xc0, 0x47, 0xaa, 0xa2, 0xfb, 0x22, 0xe0, 0xa4, 0x62, 0x56, 0xbc, 0x0e, 0x83,
	0x98, 0xfe, 0x72, 0xab, 0x98, 0xc4, 0xae, 0x4c, 0xd2, 0x05, 0x67, 0x1e, 0xde, 0x53, 0x50, 0x58,
	0x95, 0x03, 0x9e, 0x41, 0x9b, 0x83, 0xbd, 0x53, 0x35, 0xfd, 0x23, 0x20, 0x42, 0x9d, 0xdd, 0x75,
	0x38, 0xc1, 0xf1, 0xe5, 0x02, 0x3a, 0xa5, 0x36, 0x50, 0x43, 0xbe, 0xd2, 0x02, 0xcf, 0x87, 0xe5,
	0x9d, 0xff, 0x5e, 0x6e, 0xaf, 0xff, 0xff, 0x81, 0x7c, 0x20, 0xd7, 0x1a, 0xcb, 0xf7, 0xad, 0x12,
	0x9b, 0xad, 0x12, 0x9f, 0x5b, 0x25, 0x5e, 0x77, 0xca, 0xda, 0xec, 0x94, 0xf5, 0xb1, 0x53, 0xd6,
	0xb2, 0xc1, 0xbf, 0xe8, 0xea, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x5a, 0xbf, 0x87, 0xcc, 0x5a, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RapidBuyingClient is the client API for RapidBuying service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RapidBuyingClient interface {
	RapidBuying(ctx context.Context, in *RapidBuyingRequest, opts ...grpc.CallOption) (*RapidBuyingResponse, error)
}

type rapidBuyingClient struct {
	cc *grpc.ClientConn
}

func NewRapidBuyingClient(cc *grpc.ClientConn) RapidBuyingClient {
	return &rapidBuyingClient{cc}
}

func (c *rapidBuyingClient) RapidBuying(ctx context.Context, in *RapidBuyingRequest, opts ...grpc.CallOption) (*RapidBuyingResponse, error) {
	out := new(RapidBuyingResponse)
	err := c.cc.Invoke(ctx, "/rapidbuying.RapidBuying/rapidBuying", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RapidBuyingServer is the server API for RapidBuying service.
type RapidBuyingServer interface {
	RapidBuying(context.Context, *RapidBuyingRequest) (*RapidBuyingResponse, error)
}

// UnimplementedRapidBuyingServer can be embedded to have forward compatible implementations.
type UnimplementedRapidBuyingServer struct {
}

func (*UnimplementedRapidBuyingServer) RapidBuying(ctx context.Context, req *RapidBuyingRequest) (*RapidBuyingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RapidBuying not implemented")
}

func RegisterRapidBuyingServer(s *grpc.Server, srv RapidBuyingServer) {
	s.RegisterService(&_RapidBuying_serviceDesc, srv)
}

func _RapidBuying_RapidBuying_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RapidBuyingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapidBuyingServer).RapidBuying(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rapidbuying.RapidBuying/RapidBuying",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapidBuyingServer).RapidBuying(ctx, req.(*RapidBuyingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RapidBuying_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rapidbuying.RapidBuying",
	HandlerType: (*RapidBuyingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "rapidBuying",
			Handler:    _RapidBuying_RapidBuying_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rapidbuying.proto",
}

func (m *RapidBuyingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RapidBuyingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRapidbuying(dAtA, i, uint64(m.Id))
	}
	if len(m.Source) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRapidbuying(dAtA, i, uint64(len(m.Source)))
		i += copy(dAtA[i:], m.Source)
	}
	if len(m.AuthCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRapidbuying(dAtA, i, uint64(len(m.AuthCode)))
		i += copy(dAtA[i:], m.AuthCode)
	}
	if len(m.SecTime) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRapidbuying(dAtA, i, uint64(len(m.SecTime)))
		i += copy(dAtA[i:], m.SecTime)
	}
	if len(m.Nance) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRapidbuying(dAtA, i, uint64(len(m.Nance)))
		i += copy(dAtA[i:], m.Nance)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRapidbuying(dAtA, i, uint64(m.UserId))
	}
	if len(m.UserAuthSign) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRapidbuying(dAtA, i, uint64(len(m.UserAuthSign)))
		i += copy(dAtA[i:], m.UserAuthSign)
	}
	if m.AccessTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRapidbuying(dAtA, i, uint64(m.AccessTime))
	}
	if len(m.ClientAddr) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintRapidbuying(dAtA, i, uint64(len(m.ClientAddr)))
		i += copy(dAtA[i:], m.ClientAddr)
	}
	if len(m.ClientRefence) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintRapidbuying(dAtA, i, uint64(len(m.ClientRefence)))
		i += copy(dAtA[i:], m.ClientRefence)
	}
	return i, nil
}

func (m *RapidBuyingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RapidBuyingResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRapidbuying(dAtA, i, uint64(m.Id))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRapidbuying(dAtA, i, uint64(m.UserId))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRapidbuying(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.TokenTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRapidbuying(dAtA, i, uint64(m.TokenTime))
	}
	if m.Code != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRapidbuying(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func encodeVarintRapidbuying(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RapidBuyingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRapidbuying(uint64(m.Id))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovRapidbuying(uint64(l))
	}
	l = len(m.AuthCode)
	if l > 0 {
		n += 1 + l + sovRapidbuying(uint64(l))
	}
	l = len(m.SecTime)
	if l > 0 {
		n += 1 + l + sovRapidbuying(uint64(l))
	}
	l = len(m.Nance)
	if l > 0 {
		n += 1 + l + sovRapidbuying(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovRapidbuying(uint64(m.UserId))
	}
	l = len(m.UserAuthSign)
	if l > 0 {
		n += 1 + l + sovRapidbuying(uint64(l))
	}
	if m.AccessTime != 0 {
		n += 1 + sovRapidbuying(uint64(m.AccessTime))
	}
	l = len(m.ClientAddr)
	if l > 0 {
		n += 1 + l + sovRapidbuying(uint64(l))
	}
	l = len(m.ClientRefence)
	if l > 0 {
		n += 1 + l + sovRapidbuying(uint64(l))
	}
	return n
}

func (m *RapidBuyingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRapidbuying(uint64(m.Id))
	}
	if m.UserId != 0 {
		n += 1 + sovRapidbuying(uint64(m.UserId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovRapidbuying(uint64(l))
	}
	if m.TokenTime != 0 {
		n += 1 + sovRapidbuying(uint64(m.TokenTime))
	}
	if m.Code != 0 {
		n += 1 + sovRapidbuying(uint64(m.Code))
	}
	return n
}

func sovRapidbuying(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRapidbuying(x uint64) (n int) {
	return sovRapidbuying(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RapidBuyingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapidbuying
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RapidBuyingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RapidBuyingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapidbuying
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapidbuying
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRapidbuying
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRapidbuying
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapidbuying
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRapidbuying
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRapidbuying
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapidbuying
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRapidbuying
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRapidbuying
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapidbuying
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRapidbuying
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRapidbuying
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapidbuying
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAuthSign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapidbuying
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRapidbuying
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRapidbuying
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAuthSign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessTime", wireType)
			}
			m.AccessTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapidbuying
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapidbuying
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRapidbuying
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRapidbuying
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientRefence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapidbuying
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRapidbuying
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRapidbuying
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientRefence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRapidbuying(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapidbuying
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapidbuying
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RapidBuyingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRapidbuying
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RapidBuyingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RapidBuyingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapidbuying
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapidbuying
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapidbuying
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRapidbuying
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRapidbuying
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenTime", wireType)
			}
			m.TokenTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapidbuying
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRapidbuying
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRapidbuying(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRapidbuying
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRapidbuying
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRapidbuying(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRapidbuying
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRapidbuying
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRapidbuying
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRapidbuying
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthRapidbuying
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRapidbuying
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRapidbuying(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthRapidbuying
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRapidbuying = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRapidbuying   = fmt.Errorf("proto: integer overflow")
)
