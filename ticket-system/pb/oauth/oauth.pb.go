// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oauth.proto

package oauth

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CheckTokenRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *CheckTokenRequest) Reset()         { *m = CheckTokenRequest{} }
func (m *CheckTokenRequest) String() string { return proto.CompactTextString(m) }
func (*CheckTokenRequest) ProtoMessage()    {}
func (*CheckTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce0b12f599e9f07, []int{0}
}
func (m *CheckTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckTokenRequest.Merge(m, src)
}
func (m *CheckTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckTokenRequest proto.InternalMessageInfo

func (m *CheckTokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ClientDetails struct {
	ClientId                    string   `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	AccessTokenValiditySeconds  int32    `protobuf:"varint,2,opt,name=accessTokenValiditySeconds,proto3" json:"accessTokenValiditySeconds,omitempty"`
	RefreshTokenValiditySeconds int32    `protobuf:"varint,3,opt,name=refreshTokenValiditySeconds,proto3" json:"refreshTokenValiditySeconds,omitempty"`
	AuthorizedGrantTypes        []string `protobuf:"bytes,4,rep,name=authorizedGrantTypes,proto3" json:"authorizedGrantTypes,omitempty"`
}

func (m *ClientDetails) Reset()         { *m = ClientDetails{} }
func (m *ClientDetails) String() string { return proto.CompactTextString(m) }
func (*ClientDetails) ProtoMessage()    {}
func (*ClientDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce0b12f599e9f07, []int{1}
}
func (m *ClientDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientDetails.Merge(m, src)
}
func (m *ClientDetails) XXX_Size() int {
	return m.Size()
}
func (m *ClientDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ClientDetails proto.InternalMessageInfo

func (m *ClientDetails) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *ClientDetails) GetAccessTokenValiditySeconds() int32 {
	if m != nil {
		return m.AccessTokenValiditySeconds
	}
	return 0
}

func (m *ClientDetails) GetRefreshTokenValiditySeconds() int32 {
	if m != nil {
		return m.RefreshTokenValiditySeconds
	}
	return 0
}

func (m *ClientDetails) GetAuthorizedGrantTypes() []string {
	if m != nil {
		return m.AuthorizedGrantTypes
	}
	return nil
}

type UserDetails struct {
	UserId      int64    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Username    string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Authorities []string `protobuf:"bytes,3,rep,name=authorities,proto3" json:"authorities,omitempty"`
}

func (m *UserDetails) Reset()         { *m = UserDetails{} }
func (m *UserDetails) String() string { return proto.CompactTextString(m) }
func (*UserDetails) ProtoMessage()    {}
func (*UserDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce0b12f599e9f07, []int{2}
}
func (m *UserDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDetails.Merge(m, src)
}
func (m *UserDetails) XXX_Size() int {
	return m.Size()
}
func (m *UserDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDetails.DiscardUnknown(m)
}

var xxx_messageInfo_UserDetails proto.InternalMessageInfo

func (m *UserDetails) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserDetails) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserDetails) GetAuthorities() []string {
	if m != nil {
		return m.Authorities
	}
	return nil
}

type CheckTokenResponse struct {
	UserDetails   *UserDetails   `protobuf:"bytes,1,opt,name=userDetails,proto3" json:"userDetails,omitempty"`
	ClientDetails *ClientDetails `protobuf:"bytes,2,opt,name=clientDetails,proto3" json:"clientDetails,omitempty"`
	IsValidToken  bool           `protobuf:"varint,3,opt,name=isValidToken,proto3" json:"isValidToken,omitempty"`
	Err           string         `protobuf:"bytes,4,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *CheckTokenResponse) Reset()         { *m = CheckTokenResponse{} }
func (m *CheckTokenResponse) String() string { return proto.CompactTextString(m) }
func (*CheckTokenResponse) ProtoMessage()    {}
func (*CheckTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ce0b12f599e9f07, []int{3}
}
func (m *CheckTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckTokenResponse.Merge(m, src)
}
func (m *CheckTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckTokenResponse proto.InternalMessageInfo

func (m *CheckTokenResponse) GetUserDetails() *UserDetails {
	if m != nil {
		return m.UserDetails
	}
	return nil
}

func (m *CheckTokenResponse) GetClientDetails() *ClientDetails {
	if m != nil {
		return m.ClientDetails
	}
	return nil
}

func (m *CheckTokenResponse) GetIsValidToken() bool {
	if m != nil {
		return m.IsValidToken
	}
	return false
}

func (m *CheckTokenResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*CheckTokenRequest)(nil), "oauth.CheckTokenRequest")
	proto.RegisterType((*ClientDetails)(nil), "oauth.ClientDetails")
	proto.RegisterType((*UserDetails)(nil), "oauth.UserDetails")
	proto.RegisterType((*CheckTokenResponse)(nil), "oauth.CheckTokenResponse")
}

func init() { proto.RegisterFile("oauth.proto", fileDescriptor_7ce0b12f599e9f07) }

var fileDescriptor_7ce0b12f599e9f07 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xb1, 0x6e, 0xe2, 0x40,
	0x10, 0x86, 0xd9, 0x33, 0x46, 0x30, 0x3e, 0xa4, 0xbb, 0x11, 0x3a, 0xf9, 0x38, 0xc9, 0xb2, 0x5c,
	0x71, 0x0d, 0x85, 0xef, 0xaa, 0x14, 0x51, 0x08, 0x91, 0xa2, 0xa4, 0x89, 0xb4, 0x21, 0xe9, 0x1d,
	0x7b, 0x22, 0x5b, 0x10, 0x9b, 0xec, 0xae, 0x0b, 0xf2, 0x14, 0x79, 0xa0, 0x3c, 0x40, 0x4a, 0xca,
	0x94, 0x09, 0xbc, 0x48, 0xe4, 0xc5, 0x80, 0x89, 0x10, 0xdd, 0xfe, 0xb3, 0xff, 0xce, 0xcc, 0x37,
	0xb3, 0x60, 0x65, 0x41, 0xae, 0xe2, 0xfe, 0x54, 0x64, 0x2a, 0x43, 0x53, 0x0b, 0xef, 0x2f, 0xfc,
	0x1c, 0xc6, 0x14, 0x8e, 0x47, 0xd9, 0x98, 0x52, 0x4e, 0x8f, 0x39, 0x49, 0x85, 0x1d, 0x30, 0x55,
	0xa1, 0x6d, 0xe6, 0xb2, 0x5e, 0x8b, 0xaf, 0x84, 0xf7, 0xc1, 0xa0, 0x3d, 0x9c, 0x24, 0x94, 0xaa,
	0x33, 0x52, 0x41, 0x32, 0x91, 0xd8, 0x85, 0x66, 0xa8, 0x03, 0x17, 0x51, 0x69, 0xdd, 0x68, 0x3c,
	0x86, 0x6e, 0x10, 0x86, 0x24, 0xa5, 0xce, 0x7c, 0x1b, 0x4c, 0x92, 0x28, 0x51, 0xb3, 0x6b, 0x0a,
	0xb3, 0x34, 0x92, 0xf6, 0x37, 0x97, 0xf5, 0x4c, 0x7e, 0xc0, 0x81, 0x27, 0xf0, 0x47, 0xd0, 0xbd,
	0x20, 0x19, 0xef, 0x4d, 0x60, 0xe8, 0x04, 0x87, 0x2c, 0xe8, 0x43, 0xa7, 0x40, 0xcc, 0x44, 0xf2,
	0x44, 0xd1, 0xb9, 0x08, 0x52, 0x35, 0x9a, 0x4d, 0x49, 0xda, 0x75, 0xd7, 0xe8, 0xb5, 0xf8, 0xde,
	0x3b, 0x2f, 0x04, 0xeb, 0x46, 0x92, 0x58, 0x03, 0xfe, 0x82, 0x46, 0x2e, 0x49, 0x94, 0x78, 0x06,
	0x2f, 0x55, 0x01, 0x5e, 0x9c, 0xd2, 0xe0, 0x81, 0x34, 0x4a, 0x8b, 0x6f, 0x34, 0xba, 0x60, 0x95,
	0xa9, 0x55, 0x42, 0x45, 0xa3, 0x45, 0xb5, 0x6a, 0xc8, 0x7b, 0x61, 0x80, 0xd5, 0xa1, 0xcb, 0x69,
	0x96, 0x4a, 0xc2, 0xff, 0x60, 0xe5, 0xdb, 0xda, 0xba, 0xa2, 0xe5, 0x63, 0x7f, 0xb5, 0xb4, 0x4a,
	0x57, 0xbc, 0x6a, 0xc3, 0x23, 0x68, 0x87, 0xd5, 0xa5, 0xe8, 0x7e, 0x2c, 0xbf, 0x53, 0xbe, 0xdb,
	0x59, 0x18, 0xdf, 0xb5, 0xa2, 0x07, 0xdf, 0x13, 0xa9, 0xc7, 0xa6, 0x3b, 0xd1, 0x43, 0x6d, 0xf2,
	0x9d, 0x18, 0xfe, 0x00, 0x83, 0x84, 0xb0, 0xeb, 0x9a, 0xb2, 0x38, 0xfa, 0x97, 0x60, 0x5e, 0x0d,
	0x72, 0x15, 0xe3, 0x00, 0x60, 0x8b, 0x81, 0xf6, 0xba, 0xe2, 0xd7, 0xef, 0xd4, 0xfd, 0xbd, 0xe7,
	0x66, 0xc5, 0x7c, 0x6a, 0xbf, 0x2e, 0x1c, 0x36, 0x5f, 0x38, 0xec, 0x7d, 0xe1, 0xb0, 0xe7, 0xa5,
	0x53, 0x9b, 0x2f, 0x9d, 0xda, 0xdb, 0xd2, 0xa9, 0xdd, 0x35, 0xf4, 0x37, 0xfd, 0xf7, 0x19, 0x00,
	0x00, 0xff, 0xff, 0xa1, 0xe8, 0xb4, 0x4c, 0xb5, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OAuthClient is the client API for OAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OAuthClient interface {
	// token 驗證
	CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenResponse, error)
}

type oAuthClient struct {
	cc *grpc.ClientConn
}

func NewOAuthClient(cc *grpc.ClientConn) OAuthClient {
	return &oAuthClient{cc}
}

func (c *oAuthClient) CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenResponse, error) {
	out := new(CheckTokenResponse)
	err := c.cc.Invoke(ctx, "/oauth.OAuth/CheckToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OAuthServer is the server API for OAuth service.
type OAuthServer interface {
	// token 驗證
	CheckToken(context.Context, *CheckTokenRequest) (*CheckTokenResponse, error)
}

// UnimplementedOAuthServer can be embedded to have forward compatible implementations.
type UnimplementedOAuthServer struct {
}

func (*UnimplementedOAuthServer) CheckToken(ctx context.Context, req *CheckTokenRequest) (*CheckTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}

func RegisterOAuthServer(s *grpc.Server, srv OAuthServer) {
	s.RegisterService(&_OAuth_serviceDesc, srv)
}

func _OAuth_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oauth.OAuth/CheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServer).CheckToken(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OAuth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "oauth.OAuth",
	HandlerType: (*OAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckToken",
			Handler:    _OAuth_CheckToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oauth.proto",
}

func (m *CheckTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOauth(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *ClientDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientDetails) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClientId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOauth(dAtA, i, uint64(len(m.ClientId)))
		i += copy(dAtA[i:], m.ClientId)
	}
	if m.AccessTokenValiditySeconds != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOauth(dAtA, i, uint64(m.AccessTokenValiditySeconds))
	}
	if m.RefreshTokenValiditySeconds != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOauth(dAtA, i, uint64(m.RefreshTokenValiditySeconds))
	}
	if len(m.AuthorizedGrantTypes) > 0 {
		for _, s := range m.AuthorizedGrantTypes {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *UserDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDetails) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOauth(dAtA, i, uint64(m.UserId))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOauth(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Authorities) > 0 {
		for _, s := range m.Authorities {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *CheckTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserDetails != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOauth(dAtA, i, uint64(m.UserDetails.Size()))
		n1, err1 := m.UserDetails.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.ClientDetails != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOauth(dAtA, i, uint64(m.ClientDetails.Size()))
		n2, err2 := m.ClientDetails.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.IsValidToken {
		dAtA[i] = 0x18
		i++
		if m.IsValidToken {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Err) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOauth(dAtA, i, uint64(len(m.Err)))
		i += copy(dAtA[i:], m.Err)
	}
	return i, nil
}

func encodeVarintOauth(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CheckTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovOauth(uint64(l))
	}
	return n
}

func (m *ClientDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovOauth(uint64(l))
	}
	if m.AccessTokenValiditySeconds != 0 {
		n += 1 + sovOauth(uint64(m.AccessTokenValiditySeconds))
	}
	if m.RefreshTokenValiditySeconds != 0 {
		n += 1 + sovOauth(uint64(m.RefreshTokenValiditySeconds))
	}
	if len(m.AuthorizedGrantTypes) > 0 {
		for _, s := range m.AuthorizedGrantTypes {
			l = len(s)
			n += 1 + l + sovOauth(uint64(l))
		}
	}
	return n
}

func (m *UserDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOauth(uint64(m.UserId))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovOauth(uint64(l))
	}
	if len(m.Authorities) > 0 {
		for _, s := range m.Authorities {
			l = len(s)
			n += 1 + l + sovOauth(uint64(l))
		}
	}
	return n
}

func (m *CheckTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserDetails != nil {
		l = m.UserDetails.Size()
		n += 1 + l + sovOauth(uint64(l))
	}
	if m.ClientDetails != nil {
		l = m.ClientDetails.Size()
		n += 1 + l + sovOauth(uint64(l))
	}
	if m.IsValidToken {
		n += 2
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovOauth(uint64(l))
	}
	return n
}

func sovOauth(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOauth(x uint64) (n int) {
	return sovOauth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CheckTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessTokenValiditySeconds", wireType)
			}
			m.AccessTokenValiditySeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessTokenValiditySeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshTokenValiditySeconds", wireType)
			}
			m.RefreshTokenValiditySeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshTokenValiditySeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizedGrantTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizedGrantTypes = append(m.AuthorizedGrantTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorities", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authorities = append(m.Authorities, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserDetails == nil {
				m.UserDetails = &UserDetails{}
			}
			if err := m.UserDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientDetails == nil {
				m.ClientDetails = &ClientDetails{}
			}
			if err := m.ClientDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValidToken", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsValidToken = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOauth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOauth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOauth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOauth
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthOauth
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOauth
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOauth(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthOauth
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOauth = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOauth   = fmt.Errorf("proto: integer overflow")
)
